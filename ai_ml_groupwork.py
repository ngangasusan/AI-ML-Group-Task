# -*- coding: utf-8 -*-
"""AI-ML-GROUPWORK

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sk3aGJe_GHERlL5FxPZtthG3JOVuXAvJ
"""

import pandas as pd #dataset library
import numpy as np #linear algebra library

from numpy import array
from numpy import asarray
from sklearn.preprocessing import Normalizer #machine learning
from keras.activations import sigmoid
from keras.losses import mse
from numpy.random import uniform,normal

"""Hyper Parameters"""

batch_size=2

data_set = {'Day 1':[30,40,50,20,15,60],'Day 2':[40,50,20,15,60,70],'Day 3':[50,20,15,60,70,50],'Target':[20,15,60,70,50,40]}

data = pd.DataFrame(data_set)

data

X=data.drop('Target', axis=1)
y=data ['Target']

X_trans=Normalizer(norm='max').fit_transform(X)

np.reshape(array(y),(1,-1))

y=Normalizer(norm='max').fit_transform(np.reshape(array(y),(1,-1)))

y

X_trans

X_trans[0,0]

"""Artificial Neural Network Model From Scratch

weight_1=array([[.2,.1],[.3,.1],[.2,.1]])
weight_2=array([[.5],[.1]])
"""

uniform(-1,1,(3,2)) #for learning generates numbers

weight_1=uniform(-1,1,(3,2)) #shape of 3 by 2
weight_2=uniform(-1,1,(2,1)) #shape of 2 by 1

X=X_trans

X[0:batch_size] #gets first 2 rows of the dataset

output_1=X[0:batch_size]@weight_1
output_1

act_output_1=sigmoid(output_1).numpy()
act_output_1

final_output=act_output_1@weight_2
final_output

y_true=y[0][0:batch_size]
y_pred=final_output.T[0]

y_true

y_pred.T

"""Computing Mean Squared Error"""

mse(y_true,y_pred).numpy()

"""Back Propagation"""

y_1 = y_true[0]
y_1

y_2 = y_pred[0]
y_2

"""Error Computation

k=(y_true - y_pred) * y_pred(1-y_pred)




"""

k=(y_1 - y_2) * (y_2*(1-y_2))
#k = (0.2857142857142857 - 0.004870199392786531) * (0.004870199392786531 * (1-0.2857142857142857))

k

"""Computing errors from the hidden layers

𝑬𝒓𝒓𝒐𝒓(𝒋) = 𝒆𝒓𝒓𝒐𝒓 𝒂𝒕 𝒌 ∗ 𝒘𝒆𝒊𝒈𝒉𝒕 𝒐𝒇 𝒘𝒋𝒌 ∗ 𝒇’(𝒙𝒋)
"""

j = k * 0.6 * (1-0.6)
j

"""Delta Rule Formula

𝑊𝑛𝑒𝑤 = 𝑊𝑐𝑢𝑟𝑟𝑒𝑛𝑡 + Δ𝑊𝑐𝑢𝑟𝑟𝑒𝑛t

Δ𝑊𝑐𝑢𝑟𝑟𝑒𝑛𝑡 = 𝑎𝑠 (𝜂) [𝐸𝑟𝑟𝑜𝑟(𝑘)](𝑂𝑘)

𝜂 = 0.05 (for this)
"""

current_weight = 0.05*k*(y_2)
current_weight

new_weight = 0.6 + current_weight
new_weight

"""Epoch

A 100 cycles used through the full training dataset


"""

for epoch in range(100):
  print("\nEpoch %d" % (epoch,))

